{"version":3,"sources":["defaultPages.js","Param.js","Page.js","ChannelPage.js","Pages.js","Advanced.js","Complexity.js","Device.js","Footer.js","NotSupported.js","Randomize.js","App.js","reportWebVitals.js","index.js"],"names":["defaultPages","name","randomize","params","cc","min","max","value","Param","pageName","param","onParamToggled","useState","enabled","setEnabled","className","type","onChange","e","newVal","checked","disabled","Page","page","onPageToggled","map","ChannelPage","channels","onChannelToggled","channel","channelNumber","number","Pages","pages","pageComponents","concat","Advanced","showAdvanced","setShowAdvanced","onClick","Complexity","onComplexityChange","complexity","step","Device","onDeviceChange","onNotSupported","devices","setDevices","deviceOptions","setDeviceOptions","useEffect","WebMidi","err","console","log","options","output","device","find","d","target","Footer","href","NotSupported","rel","Randomize","onRandomize","getInitialChannels","Array","x","i","App","setDevice","setComplexity","setPages","notSupported","setNotSupported","setChannels","c","channelsConfig","setChannelsConfig","randomizeParam","absoluteMin","absoluteMax","currentValue","minCeil","Math","ceil","maxFloor","floor","random","getRandomIntInclusive","newDevice","newChannels","newPages","channelPage","pageConfig","p","channelPageParams","pageConfigParams","newChannelParams","newValue","forEach","sendControlChange","parseFloat","foundPage","foundParam","newParam","newParams","newPage","newChannelsConfig","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f853fb3.chunk.js","sourcesContent":["const defaultPages = [\n  {\n    name: 'Synth',\n    randomize: true,\n    params: [\n      { name: 'Level', cc: 16, randomize: true },\n      { name: 'Synth Param 2', cc: 17, randomize: true },\n      { name: 'Synth Param 3', cc: 18, randomize: true },\n      { name: 'Synth Param 4', cc: 19, randomize: true },\n      { name: 'Synth Param 5', cc: 20, randomize: true },\n      { name: 'Synth Param 6', cc: 21, randomize: true },\n      { name: 'Synth Param 7', cc: 22, randomize: true },\n      { name: 'Synth Param 8', cc: 23, randomize: true },\n    ],\n  },\n  {\n    name: 'Filter',\n    randomize: true,\n    params: [\n      { name: 'Attack Time', cc: 70, randomize: true },\n      { name: 'Decay Time', cc: 71, randomize: true },\n      { name: 'Sustain Level', cc: 72, randomize: true },\n      { name: 'Release Time', cc: 73, randomize: true },\n      { name: 'Frequency', cc: 74, randomize: true },\n      { name: 'Resonance', cc: 75, randomize: true },\n      { name: 'Mode', cc: 76, min: 0, max: 6, randomize: true },\n      { name: 'Env Depth', cc: 77, randomize: true },\n    ],\n  },\n\n  {\n    name: 'Amp',\n    randomize: true,\n    params: [\n      { name: 'Attack Time', cc: 78, min: 0, max: 30, randomize: true },\n      { name: 'Hold Time', cc: 79, randomize: true },\n      { name: 'Decay Time', cc: 80, randomize: true },\n      { name: 'Overdrive', cc: 81, randomize: true },\n      { name: 'Delay Send', cc: 82, min: 0, max: 30, randomize: true },\n      { name: 'Reverb Send', cc: 83, min: 0, max: 30, randomize: true },\n      { name: 'Pan', cc: 10, min: 0, max: 127, value: 64, randomize: false },\n    ],\n  },\n  {\n    name: 'LFO',\n    randomize: true,\n    params: [\n      { name: 'Speed', cc: 102, randomize: true },\n      { name: 'Mult', cc: 103, min: 0, max: 23, randomize: true },\n      { name: 'Fade', cc: 104, randomize: true },\n      { name: 'Destination', cc: 105, min: 0, max: 31, randomize: true },\n      { name: 'Waveform', cc: 106, min: 0, max: 6, randomize: true },\n      { name: 'Start Phase', cc: 107, randomize: true },\n      { name: 'Trig Mode', cc: 108, min: 0, max: 4, randomize: true },\n      { name: 'Depth', cc: 109, randomize: true },\n    ],\n  },\n  {\n    name: 'Sample',\n    randomize: true,\n    params: [\n      { name: 'Tune', cc: 24, randomize: true },\n      { name: 'Fine Tune', cc: 25, randomize: true },\n      { name: 'Bit Reduction', cc: 26, randomize: true },\n      { name: 'Slot', cc: 27, randomize: true },\n      { name: 'Start', cc: 28, randomize: true },\n      { name: 'End', cc: 29, randomize: true },\n      { name: 'Loop', cc: 30, randomize: true },\n      { name: 'Level', cc: 31, min: 0, max: 100, randomize: true },\n    ],\n  },\n];\n\nexport default defaultPages;\n","import React, { useState } from 'react';\r\n\r\nconst Param = ({ pageName, param, onParamToggled }) => {\r\n  const { randomize } = param;\r\n  const [enabled, setEnabled] = useState(randomize);\r\n\r\n  const handleCheck = (e) => {\r\n    const newVal = !enabled;\r\n    setEnabled(newVal);\r\n\r\n    onParamToggled(pageName, param, newVal);\r\n  };\r\n\r\n  return (\r\n    <li key={param.name}>\r\n      <label className=\"checkLabel\">\r\n        <input\r\n          type=\"checkbox\"\r\n          onChange={handleCheck}\r\n          checked={enabled}\r\n          disabled={param.disabled}\r\n        />{' '}\r\n        {param.name}\r\n        <span className=\"checkmark\"></span>\r\n      </label>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Param;\r\n","import React, { useState } from 'react';\r\nimport Param from './Param';\r\nimport './Page.css';\r\n\r\nconst Page = ({ page, onPageToggled, onParamToggled }) => {\r\n  const { name, randomize } = page;\r\n  const [enabled, setEnabled] = useState(randomize);\r\n\r\n  const handleCheck = (e) => {\r\n    const newVal = !enabled;\r\n    setEnabled(newVal);\r\n    onPageToggled(name, newVal);\r\n  };\r\n\r\n  return (\r\n    <div className=\"page\">\r\n      <h3>{name}</h3>\r\n      <p>\r\n        <label className=\"checkLabel\"><input type=\"checkbox\" onChange={handleCheck} checked={enabled}></input>{' '}\r\n        Randomize\r\n        <span className=\"checkmark\"></span>\r\n        </label>\r\n      </p>\r\n      <ul className=\"paramList\">\r\n        {page.params.map((param) => {\r\n          return <Param key={param.name} pageName={page.name} param={param} onParamToggled={onParamToggled} />;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Page;\r\n","import './Page.css';\n\nconst ChannelPage = ({ channels, onChannelToggled }) => {\n  const handleToggled = (channelNumber) => {\n    onChannelToggled(channelNumber);\n  };\n\n  return (\n    <div className=\"page\">\n      <h3>Channels</h3>\n      <ul className=\"paramList\">\n        {channels.map((channel) => {\n          return (\n            <li key={channel.number}>\n              <label className=\"checkLabel\">\n                <input\n                  type=\"checkbox\"\n                  onChange={() => handleToggled(channel.number)}\n                  checked={channel.randomize}\n                />{' '}\n                {channel.number}\n                <span className=\"checkmark\"></span>\n              </label>\n            </li>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ChannelPage;\n","import Page from './Page';\nimport ChannelPage from './ChannelPage';\n\nconst Pages = ({\n  pages,\n  channels,\n  onPageToggled,\n  onParamToggled,\n  onChannelToggled,\n}) => {\n  const pageComponents = pages.map((page) => {\n    return (\n      <Page\n        key={page.name}\n        page={page}\n        onPageToggled={onPageToggled}\n        onParamToggled={onParamToggled}\n      ></Page>\n    );\n  });\n\n  const allComponents = [\n    <ChannelPage\n      key=\"channelpage\"\n      onChannelToggled={onChannelToggled}\n      channels={channels}\n    />,\n  ].concat(pageComponents);\n  return allComponents;\n};\n\nexport default Pages;\n","import React, { useState } from 'react';\nimport Pages from './Pages';\nimport './Advanced.css';\n\nconst Advanced = ({\n  pages,\n  channels,\n  onParamToggled,\n  onPageToggled,\n  onChannelToggled,\n}) => {\n  const [showAdvanced, setShowAdvanced] = useState(false);\n\n  const handleAdvancedToggle = () => {\n    setShowAdvanced(!showAdvanced);\n  };\n\n  return (\n    <div>\n      <div className=\"container\">\n        <button className=\"linkButton\" onClick={handleAdvancedToggle}>\n          {showAdvanced ? 'Hide advanced options' : 'Show advanced options'}\n        </button>\n      </div>\n\n      {showAdvanced ? (\n        <div className=\"container pagesContainer\">\n          <Pages\n            channels={channels}\n            pages={pages}\n            onChannelToggled={onChannelToggled}\n            onParamToggled={onParamToggled}\n            onPageToggled={(pageName, enabled) =>\n              onPageToggled(pageName, enabled)\n            }\n          />\n        </div>\n      ) : null}\n    </div>\n  );\n};\n\nexport default Advanced;\n","import './Complexity.css';\n\nconst Complexity = ({ onComplexityChange, complexity }) => {\n  return (\n    <div className=\"container\">\n      <p>Randomization complexity:</p>\n      <p>\n        <input\n          type=\"range\"\n          value={complexity}\n          min=\"0\"\n          max=\"1\"\n          step=\"0.01\"\n          onChange={onComplexityChange}\n        />\n      </p>\n    </div>\n  );\n};\n\nexport default Complexity;\n","import React, { useEffect, useState } from 'react';\nimport './Device.css';\nimport * as WebMidi from 'webmidi';\n\nconst Device = ({ onDeviceChange, onNotSupported }) => {\n  const [devices, setDevices] = useState([]);\n  const [deviceOptions, setDeviceOptions] = useState([]);\n\n  useEffect(() => {\n    WebMidi.enable((err) => {\n      if (err) {\n        console.log('WebMidi could not be enabled.', err);\n        onNotSupported();\n        return;\n      }\n      const options = [{ value: '', name: 'No device selected' }].concat(\n        WebMidi.outputs.map((output) => ({\n          value: output.name,\n          name: output.name,\n        }))\n      );\n      setDevices(WebMidi.outputs);\n      setDeviceOptions(options);\n    });\n  });\n\n  const handleDeviceChange = (e) => {\n    const device = devices.find((d) => d.name === e.target.value);\n    onDeviceChange(device);\n  };\n\n  return (\n    <div className=\"container\">\n      <p>Select your RYTM MIDI device:</p>\n      <select onChange={handleDeviceChange} className=\"deviceSelect\">\n        {deviceOptions.map((device) => {\n          return (\n            <option key={device.name} value={device.value}>\n              {device.name}\n            </option>\n          );\n        })}\n      </select>\n    </div>\n  );\n};\n\nexport default Device;\n","import './Footer.css';\n\nconst Footer = () => {\n  return (\n    <div className=\"container\">\n      <footer>\n        <small>\n          Developed by <a href=\"//kindohm.com\">kindohm</a>. Inspired by the{' '}\n          <a href=\"//algorithmic-instruments.com/dsi-tempest-randomizer\">\n            DSI Tempest Randomizer\n          </a>\n        </small>\n      </footer>\n    </div>\n  );\n};\n\nexport default Footer;\n","const NotSupported = () => {\n  return (\n    <div className=\"container\">\n      <p>\n        Your web browser does not support access to Web MIDI. Please refer to{' '}\n        <a\n          href=\"https://developer.mozilla.org/en-US/docs/Web/API/MIDIAccess#browser_compatibility\"\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          Web MIDI browser compatibility.\n        </a>\n      </p>\n    </div>\n  );\n};\nexport default NotSupported;\n","import './Randomize.css';\n\nconst Randomize = ({ onRandomize, disabled }) => {\n  return (\n    <div className=\"container\">\n      <button\n        className=\"randomizeButton\"\n        onClick={onRandomize}\n        disabled={disabled}\n      >\n        Randomize\n      </button>\n    </div>\n  );\n};\nexport default Randomize;\n","import React, { useState } from 'react';\nimport defaultPages from './defaultPages';\nimport Advanced from './Advanced';\nimport Complexity from './Complexity';\nimport Device from './Device';\nimport Footer from './Footer';\nimport NotSupported from './NotSupported';\nimport Randomize from './Randomize';\nimport './App.css';\n\nconst getInitialChannels = (pages) => {\n  return [...Array(12)].map((x, i) => {\n    return {\n      number: i + 1,\n      pages,\n    };\n  });\n};\n\nconst getInitialChannelsConfig = () => {\n  return getInitialChannels().map((c) => ({ ...c, randomize: true }));\n};\n\nconst App = () => {\n  const [device, setDevice] = useState(null);\n  const [complexity, setComplexity] = useState(0.666);\n  const [pages, setPages] = useState(defaultPages);\n  const [notSupported, setNotSupported] = useState(false);\n  const [channels, setChannels] = useState(getInitialChannels(defaultPages));\n  const [channelsConfig, setChannelsConfig] = useState(\n    getInitialChannelsConfig()\n  );\n\n  const handleDeviceChange = (newDevice) => {\n    setDevice(newDevice);\n  };\n\n  const getRandomIntInclusive = (min, max) => {\n    const minCeil = Math.ceil(min);\n    const maxFloor = Math.floor(max);\n    return Math.floor(Math.random() * (maxFloor - minCeil + 1) + minCeil);\n  };\n\n  const randomizeParam = (absoluteMin, absoluteMax, currentValue) => {\n    const min = currentValue - (currentValue - absoluteMin) * complexity;\n    const max = currentValue + (absoluteMax - currentValue) * complexity;\n    const value = getRandomIntInclusive(min, max);\n    return value;\n  };\n\n  const handleRandomize = () => {\n    const newChannels = channels.map((channel) => {\n      const channelConfig = channelsConfig.find(\n        (c) => c.number === channel.number\n      );\n      if (!channelConfig.randomize) return channel;\n\n      const channelPages = channel.pages;\n      const newPages = channelPages.map((channelPage) => {\n        const pageConfig = pages.find((p) => p.name === channelPage.name);\n        const randomizePage = pageConfig.randomize;\n        if (!randomizePage) return channelPage;\n        const channelPageParams = channelPage.params;\n        const pageConfigParams = pageConfig.params;\n\n        const newChannelParams = channelPageParams.map((param) => {\n          const { min = 0, max = 127, value = 64 } = param;\n          const paramConfig = pageConfigParams.find(\n            (p) => p.name === param.name\n          );\n          const shouldRandomizeParam = paramConfig.randomize;\n          if (!shouldRandomizeParam) return param;\n          const newValue = randomizeParam(min, max, value);\n          return { ...param, value: newValue };\n        });\n        return { ...channelPage, params: newChannelParams };\n      });\n\n      return { ...channel, pages: newPages };\n    });\n\n    setChannels(newChannels);\n\n    if (!device) return;\n\n    newChannels.forEach((channel) => {\n      const channelPages = channel.pages;\n\n      channelPages.forEach((channelPage) => {\n        const { params } = channelPage;\n        const pageConfig = pages.find((p) => p.name === channelPage.name);\n        const randomizePage = pageConfig.randomize;\n        if (!randomizePage) return;\n\n        params.forEach((param) => {\n          const { cc, value } = param;\n          device.sendControlChange(cc, value, channel.number);\n        });\n      });\n    });\n  };\n\n  const handlePageToggled = (pageName, enabled) => {\n    const foundPage = pages.find((p) => p.name === pageName);\n    const newParams = foundPage.params.map((param) => ({\n      ...param,\n      disabled: !enabled,\n    }));\n    const newPage = { ...foundPage, params: newParams, randomize: enabled };\n    const newPages = pages.map((page) =>\n      page.name === pageName ? newPage : page\n    );\n    setPages(newPages);\n  };\n\n  const handleParamToggled = (pageName, param, enabled) => {\n    const foundPage = pages.find((p) => p.name === pageName);\n    const { params } = foundPage;\n    const foundParam = params.find((p) => p.name === param.name);\n    const newParam = { ...foundParam, randomize: enabled };\n    const newParams = params.map((p) => (p.name === param.name ? newParam : p));\n    const newPage = { ...foundPage, params: newParams };\n    const newPages = pages.map((page) =>\n      page.name === pageName ? newPage : page\n    );\n    setPages(newPages);\n  };\n\n  const handleComplexityChange = (e) => {\n    setComplexity(parseFloat(e.target.value));\n  };\n\n  const handleOnNotSupported = () => {\n    setNotSupported(true);\n  };\n\n  const handleChannelToggled = (channelNumber) => {\n    const newChannelsConfig = channelsConfig.map((channel) =>\n      channel.number !== channelNumber\n        ? channel\n        : { ...channel, randomize: !channel.randomize }\n    );\n    setChannelsConfig(newChannelsConfig);\n  };\n\n  return (\n    <div className=\"mainContainer\">\n      <h1>RYTM Randomizer</h1>\n\n      {notSupported ? (\n        <NotSupported />\n      ) : (\n        <div>\n          <Device\n            onDeviceChange={handleDeviceChange}\n            onNotSupported={handleOnNotSupported}\n          />\n\n          <Randomize onRandomize={handleRandomize} disabled={!device} />\n\n          <Complexity\n            onComplexityChange={handleComplexityChange}\n            complexity={complexity}\n          />\n\n          <Advanced\n            pages={pages}\n            channels={channelsConfig}\n            onParamToggled={handleParamToggled}\n            onPageToggled={handlePageToggled}\n            onChannelToggled={handleChannelToggled}\n          />\n        </div>\n      )}\n      <Footer></Footer>\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}